ext <- paste0( "/map/translation/",pr,"/",aa,"?")
r <- GET(paste(server, ext, sep = ""), content_type("application/json"))
stop_for_status(r)
# use this if you get a simple nested list back, otherwise inspect its structure
# head(data.frame(t(sapply(content(r),c))))
head(fromJSON(toJSON(content(r))))
# use this if you get a simple nested list back, otherwise inspect its structure
# head(data.frame(t(sapply(content(r),c))))
fromJSON(toJSON(content(r)))
# use this if you get a simple nested list back, otherwise inspect its structure
# head(data.frame(t(sapply(content(r),c))))
df = data.frame ( fromJSON(toJSON(content(r))) )
df
gene = "CHD2"
aa = "721..721"
pr = t2g[t2g$external_gene_name == gene, ]$ensembl_peptide_id
pr = unique ( pr[1] )
server <- "https://rest.ensembl.org"
ext <- paste0( "/map/translation/",pr,"/",aa,"?")
r <- GET(paste(server, ext, sep = ""), content_type("application/json"))
stop_for_status(r)
# use this if you get a simple nested list back, otherwise inspect its structure
# head(data.frame(t(sapply(content(r),c))))
df = data.frame ( fromJSON(toJSON(content(r))) )
df
gene = "PTPRD"
aa = "1023..1023"
pr = t2g[t2g$external_gene_name == gene, ]$ensembl_peptide_id
pr = unique ( pr[1] )
server <- "https://rest.ensembl.org"
ext <- paste0( "/map/translation/",pr,"/",aa,"?")
r <- GET(paste(server, ext, sep = ""), content_type("application/json"))
stop_for_status(r)
# use this if you get a simple nested list back, otherwise inspect its structure
# head(data.frame(t(sapply(content(r),c))))
df = data.frame ( fromJSON(toJSON(content(r))) )
df
gene = "TP53"
aa = "175..175"
pr = t2g[t2g$external_gene_name == gene, ]$ensembl_peptide_id
pr = unique ( pr[1] )
server <- "https://rest.ensembl.org"
ext <- paste0( "/map/translation/",pr,"/",aa,"?")
r <- GET(paste(server, ext, sep = ""), content_type("application/json"))
stop_for_status(r)
# use this if you get a simple nested list back, otherwise inspect its structure
# head(data.frame(t(sapply(content(r),c))))
df = data.frame ( fromJSON(toJSON(content(r))) )
# its difficult to tell exactly if end or start so roughly 3 bp
df$mappings.start
df$mappings.end
df$mappings.seq_region_name # this is the chr
x <- list("a" = 2.5, "b" = TRUE, "c" = 1:3)
x[["a"]]
y <- list("a1" = 2.5, "b1" = TRUE, "c1" = 1:3)
x = list ( y, x )
x
x[["a"]]
x <- list("a" = 2.5, "b" = TRUE, "c" = 1:3)
y <- list("a1" = 2.5, "b1" = TRUE, "c1" = 1:3)
x = c ( y, x )
x
x[["a"]]
head ( action )
final = data.frame (
`Order ID`= as.character(),
stringsAsFactors = F
)
final
final = data.frame (
`Order ID`= as.character(),
Disease = as.character(),
`Order Date` = as.character(),
`Report Signed` = as.character(),
`Signout Pathologist` = as.character(),
"Ordering Physician" = as.character()
stringsAsFactors = F
)
data.frame (
`Order ID`= as.character(),
Disease = as.character(),
`Order Date` = as.character(),
`Report Signed` = as.character(),
`Signout Pathologist` = as.character(),
"Ordering Physician" = as.character(),
stringsAsFactors = F
)
library("openxlsx")
setwd("C:/Users/User/Dropbox/git.hub.stuff/asc.lab/temp")
gout <- read.xlsx(file.temp , sheet="Data Dictionary", colNames = TRUE)
library("openxlsx")
file.temp <- 'MTB Index.xlsx'
gout <- read.xlsx(file.temp , sheet="Data Dictionary", colNames = TRUE)
library("openxlsx")
file.temp <- 'MTB Index.xlsx'
gout <- read.xlsx(file.temp , sheet="Data Dictionary", colNames = TRUE)
library("openxlsx")
file.temp <- 'MTB Index.xlsx'
gout <- read.xlsx(file.temp , sheet="Data Dictionary", colNames = TRUE)
head ( gout )
final <- read.xlsx(file.temp , sheet="Data Dictionary", colNames = TRUE)
View ( final )
matrix(, nrow = 0, ncol = 12)
df = data.frame ( matrix(, nrow = 0, ncol = 12) )
df
file.temp <- 'MTB Index.xlsx'
final <- read.xlsx(file.temp , sheet="Data Dictionary", colNames = TRUE)
View ( final )
final <- read.xlsx(file.temp , sheet="Data Dictionary", colNames = TRUE)
View ( final )
setwd("C:/Users/User/Dropbox/git.hub.stuff/asc.lab/temp")
file.temp <- 'MTB Index.xlsx'
final <- read.xlsx(file.temp , sheet="Data Dictionary", colNames = TRUE)
View (final)
file.temp <- 'MTB Index2.xlsx'
final <- read.xlsx(file.temp , sheet="Data Dictionary", colNames = TRUE)
setwd("C:/Users/User/Dropbox/git.hub.stuff/asc.lab/temp")
file.temp <- 'MTB Index2.xlsx'
final <- read.xlsx(file.temp , sheet="Data Dictionary", colNames = TRUE)
setwd("C:/Users/User/Dropbox/git.hub.stuff/asc.lab/temp")
file.temp <- 'MTB Index.xlsx'
final <- read.xlsx(file.temp , sheet="Data Dictionary", colNames = TRUE)
View ( final )
total.rows = nrow ( final )
total.rows
df = data.frame ( matrix(, nrow = 0, ncol = total.rows ) )
df
colnames(df) = final$GO.field
df
head ( df )
# get the import
import = read.csv(  "GO Export Example.csv" )
head ( import )
ids = unique ( import$Order.ID)
ids
ids = as.character ( unique ( import$Order.ID) )
ids
print ( length ( ids ))
disease = import[1:1, ]$Disease
disease
disease = as.character ( import[1:1, ]$Disease )
disease
str_match( disease , "(.*)\\(.*)")
library( stringr )
str_match( disease , "(.*)\\(.*)")
disease
str_match( disease , "(.*)\\((.*)")
str_match( disease , "(.*)\\((.*)")[,2]
diseasep = str_match( disease , "(.*)\\((.*)")[,2]
diseasep = str_match( disease , "(.*)\\((.*)")[,2]
diseasep[, 2]
diseasep
str_match( disease , "(.*)\\((.*)")
diseasep = str_match( disease , "(.*)\\((.*)")
diseasep
gsub("\\)|\\)", diseasep)
gsub("\\)|\\)", diseasep[,3])
diseasep[,3]
gsub("C", )
gsub("C", diseasep[,3] )
?gsub
gsub("\\)|\\)", "", diseasep[,3])
disease = "Glioma"
diseasep = str_match( disease , "(.*)\\((.*)")
diseasep[,2]
gsub("\\)|\\)", "", diseasep[,3])
str_match( disease , "(.*)")
file.temp <- 'MTB Index.xlsx'
final <- read.xlsx(file.temp , sheet="Data Dictionary", colNames = TRUE)
head ( final )
fields = unique ( final$MTB.field)
fields
# create empty export
export = data.frame ( matrix(, nrow = 0, ncol = length ( fields ) ) )
export
# create empty export
export = data.frame ( matrix(nrow = 0, ncol = length ( fields ) ) )
colnames(export) = fields
export
import = read.csv(  "GO Export Example.csv" )
import =read.xlsx("data.csv",sheetIndex=3, colNames = TRUE)
ids = as.character ( unique ( import$Order.ID) )
# get the import
import = read.csv(  "GO Export Example.csv" )
ids = as.character ( unique ( import$Order.ID) )
ids
index <- read.xlsx(file.temp , sheet="Index", colNames = TRUE)
index$ccgl
import = read.csv(  "GO Export Example.csv" )
ids = as.character ( unique ( import$Order.ID) )
index <- read.xlsx(file.temp , sheet="Index", colNames = TRUE)
index
head ( index )
index <- read.xlsx(file.temp , sheet="Index", colNames = TRUE)
head ( index )
print ( length ( ids ))
head ( import )
ids = as.character ( unique ( import$CCGL.No) )
ids
intersect ( ids, index$ccgl)
# fill in starter rows.
record.id = ids
ids = as.character ( unique ( import$CCGL.No) )
ids
# fill in starter rows.
record.id = index[ index$ccgl %in% ids, ]
record.id
# fill in starter rows.
record.id = index[ index$ccgl %in% ids, ]$record_id
record.id
record.id
r = record.id[1]
r
ccgl = index [ index$record_id == r, ]$ccgl
ccgl
index <- read.xlsx(file.temp , sheet="Index", colNames = TRUE)
head ( index )
ccgl = index [ index$record_id == r, ]$ccgl
ccgl
# get mtb_number
mtb_number = index [ index$record_id == r, ]$mtb_number
fields
fields <- read.xlsx(file.temp , sheet="fields", colNames = TRUE)
fields <- read.xlsx(file.temp , sheet="fields", colNames = TRUE)
fields = unique ( fields$name)
export = data.frame ( matrix(nrow = 0, ncol = length ( fields ) ) )
colnames(export) = fields
export
disease = import[import$CCGL.No == ccgl, ]
disese
disease
disease = import[import$CCGL.No == ccgl, ]$Disease
disease
disease = unique ( import[import$CCGL.No == ccgl, ]$Disease
}
disease = as.character ( import[1:1, ]$Disease )
disease = "Glioma"
diseasep = str_match( disease , "(.*)\\((.*)")
diseasep[,2]
gsub("\\)|\\)", "", diseasep[,3])
if ( is.na(diseasep) ){
# if no code the display "need code"
str_match( disease , "(.*)")
}
final = data.frame (
`Order ID`= as.character(),
Disease = as.character(),
`Order Date` = as.character(),
`Report Signed` = as.character(),
`Signout Pathologist` = as.character(),
"Ordering Physician" = as.character(),
"Ordering Physician Firs" = as.character()
stringsAsFactors = F
)
t4 <- "||"
str_match(t4[2], "\\|(.*?)\\|")[,2]
disease = unique ( import[import$CCGL.No == ccgl, ]$Disease )
disease
disease = as.character ( unique ( import[import$CCGL.No == ccgl, ]$Disease ) )
disease
disease = "Glioma"
diseasep = str_match( disease , "(.*)\\((.*)")
disease.parse = str_match( disease , "(.*)\\((.*)")
disease.parse = str_match( disease , "(.*)\\((.*)")
pt_dx_onco_name = gsub("\\)|\\)", "", disease.parse[,3])
pt_dx_onco_name
str_match( disease , "(.*)\\((.*)")
disease = "Alveolar Rhabdomyosarcoma (ARMS)"
disease.parse = str_match( disease , "(.*)\\((.*)")
disease.parse
pt_dx_onco_name = gsub("\\)|\\)", "", disease.parse[,3])
pt_dx_onco_name
pt_dx_onco_code = gsub("\\)|\\)", "", disease.parse[,3])
disease.parse[,2]
disease = "Alveolar Rhabdomyosarcoma (ARMS)"
disease.parse = str_match( disease , "(.*)\\((.*)")
pt_dx_onco_code = gsub("\\)|\\)", "", disease.parse[,3])
if ( is.na(pt_dx_onco_code) ){
# if no code the display "need code"
str_match( disease , "(.*)")
}else{
pt_dx_onco_name = disease.parse[,2]
}
pt_dx_onco_name
pt_dx_onco_code
disease = "Glioma"
disease.parse = str_match( disease , "(.*)\\((.*)")
pt_dx_onco_code = gsub("\\)|\\)", "", disease.parse[,3])
pt_dx_onco_code
# if no code the display "need code"
pt_dx_onco_name = str_match( disease , "(.*)")[,2]
pt_dx_onco_name
mini = import[ import$CCGL.No == ccgl, ]
ccgl = index [ index$record_id == r, ]$ccgl
# subset import to only get unique record
mini = import[ import$CCGL.No == ccgl, ]
# get mtb_number
mtb_number = index [ index$record_id == r, ]$mtb_number
mtb_round =1
scheduling_status =1
# parse disease
disease = as.character ( unique ( mini[mini$CCGL.No == ccgl, ]$Disease ) )
# format is disease (code)
disease.parse = str_match( disease , "(.*)\\((.*)")
pt_dx_onco_code = gsub("\\)|\\)", "", disease.parse[,3])
# sometime there are no code so we need to check.
if ( is.na(pt_dx_onco_code) ){
# if no code the display "need code"
pt_dx_onco_name = str_match( disease , "(.*)")[,2]
pt_dx_onco_code = "needs code"
}else{
pt_dx_onco_name = disease.parse[,2]
}
gc()
mini$Order.Date
unique ( mini$Order.Date )
#
test_procedure_date = as.character ( unique ( mini$Order.Date ) )
# the record number is the index that is unique to each ccgl id. this is what redcap uses.
for ( r in record.id){
ccgl = index [ index$record_id == r, ]$ccgl
# subset import to only get unique record
mini = import[ import$CCGL.No == ccgl, ]
# get mtb_number
mtb_number = index [ index$record_id == r, ]$mtb_number
mtb_round =1
scheduling_status =1
# parse disease
disease = as.character ( unique ( mini[mini$CCGL.No == ccgl, ]$Disease ) )
# format is disease (code)
disease.parse = str_match( disease , "(.*)\\((.*)")
pt_dx_onco_code = gsub("\\)|\\)", "", disease.parse[,3])
# sometime there are no code so we need to check.
if ( is.na(pt_dx_onco_code) ){
# if no code the display "need code"
pt_dx_onco_name = str_match( disease , "(.*)")[,2]
pt_dx_onco_code = "needs code"
}else{
pt_dx_onco_name = disease.parse[,2]
}
#
test_procedure_date = as.character ( unique ( mini$Order.Date ) )
}
#
test_procedure_date = as.character ( unique ( mini$Order.Date ) )
test_procedure_date
test_procedure_date = gsub ( "T.*","", test_procedure_date)
test_procedure_date
str_match( disease , "(\d\d\d\d)-(\d\d)-(\d\d)")
date = str_match( disease , "(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)")
date
str_match( disease , "(....)-(..)-(..)")
str_match( disease , "(....)\\-(..)\\-(..)")
str_match( test_procedure_date  , "(....)\\-(..)\\-(..)")
paste0 (  date[,3], "/",date[,4], "/" , date[,2]  )
date[,3]
date = str_match( test_procedure_date  , "(....)\\-(..)\\-(..)")
paste0 (  date[,3], "/",date[,4], "/" , date[,2]  )
date = paste0 (  date[,3], "/",date[,4], "/" , date[,2]  )
test_procedure_date = as.character ( unique ( mini$Order.Date ) )
test_procedure_date = gsub ( "T.*","", test_procedure_date)
test_procedure_date = str_match( test_procedure_date  , "(....)\\-(..)\\-(..)")
test_procedure_date = paste0 (  date[,3], "/",date[,4], "/" , date[,2]  )
test_procedure_date = as.character ( unique ( mini$Order.Date ) )
test_procedure_date = gsub ( "T.*","", test_procedure_date)
test_procedure_date
test_procedure_date = as.character ( unique ( mini$Order.Date ) )
test_procedure_date = gsub ( "T.*","", test_procedure_date)
test_procedure_date = str_match( test_procedure_date  , "(....)\\-(..)\\-(..)")
test_procedure_date = paste0 (  test_procedure_date[,3], "/",test_procedure_date[,4], "/" , test_procedure_date[,2]  )
test_procedure_date
final
#
f = final[final$MTB.field == "test_procedure_date", ]
f
#
f = final[final$MTB.field == "test_procedure_date", ]$GO.field
f
as.character ( unique ( mini[[f]] ) )
as.character ( unique ( mini[f] ) )
mini[f]
as.character ( unique ( mini[, f] ) )
f
mini [ , f]
head ( min )
hed ( mini )
head (  mini )
f
f = gsub ( " ",".", f)
as.character ( unique ( mini[, f] ) )
f = final[final$MTB.field == "so_date", ]$GO.field
f = gsub ( " ",".", f)
f
so_date = as.character ( unique ( mini[, f] ) )
so_date = gsub ( "T.*","", so_date)
so_date = str_match( so_date  , "(....)\\-(..)\\-(..)")
so_date = paste0 (  so_date[,3], "/",so_date[,4], "/" , so_date[,2]  )
so_date
f = final[final$MTB.field == "mol_path", ]$GO.field
f = gsub ( " ",".", f)
f
f = unique ( f )
f
mol_path = as.character ( unique ( mini[, f] ) )
mol_path
f = final[final$MTB.field == "ordering_md_last", ]$GO.field
f = gsub ( " ",".", f)
f = unique ( f )
ordering_md_last = as.character ( unique ( mini[, f] ) )
ordering_md_last
f = final[final$MTB.field == "ordering_md_first", ]$GO.field
f = gsub ( " ",".", f)
f = unique ( f )
ordering_md_first = as.character ( unique ( mini[, f] ) )
f = final[final$MTB.field == "ordering_md_first", ]$GO.field
f = gsub ( " ",".", f)
f = unique ( f )
ordering_md_first = as.character ( unique ( mini[, f] ) )
ordering_md_first
f = final[final$MTB.field == "dob", ]$GO.field
f = gsub ( " ",".", f)
dob = as.character ( unique ( mini[, f] ) )
dob = gsub ( "T.*","", dob)
dob = str_match( dob  , "(....)\\-(..)\\-(..)")
dob = paste0 (  dob[,3], "/",dob[,4], "/" , dob[,2]  )
dob
f = final[final$MTB.field == "pt_gender", ]$GO.field
f = gsub ( " ",".", f)
f = unique ( f )
ordering_md_first = as.character ( unique ( mini[, f] ) )
f
pt_gender = as.character ( unique ( mini[, f] ) )
pt_gender
pt_gender = ifelse ( pt_gender == "Male", 1, 2)
pt_gender
f = final[final$MTB.field == "pt_mrn", ]$GO.field
f = gsub ( " ",".", f)
f = unique ( f )
pt_mrn = as.character ( unique ( mini[, f] ) )
pt_mrn
f = final[final$MTB.field == "pt_first_name", ]$GO.field
f = gsub ( " ",".", f)
f = unique ( f )
pt_first_name = as.character ( unique ( mini[, f] ) )
pt_first_name
f = final[final$MTB.field == "pt_last_name", ]$GO.field
f = gsub ( " ",".", f)
f = unique ( f )
pt_last_name = as.character ( unique ( mini[, f] ) )
pt_last_name
f = final[final$MTB.field == "pt_middle_name", ]$GO.field
f = gsub ( " ",".", f)
f = unique ( f )
pt_middle_name = as.character ( unique ( mini[, f] ) )
pt_middle_name
f = final[final$MTB.field == "germline_consent", ]$GO.field
f = gsub ( " ",".", f)
f = unique ( f )
germline_consent = as.character ( unique ( mini[, f] ) )
# germline_consent
f = final[final$MTB.field == "germline_consent", ]$GO.field
f
f = gsub ( " ",".", f)
f = unique ( f )
f
germline_consent = as.character ( unique ( mini[, f] ) )
colnames ( min )
colnames ( mini )
r
import = read.csv(  "GO Export Example.csv" )
ccgl = index [ index$record_id == r, ]$ccgl
# subset import to only get unique record
mini = import[ import$CCGL.No == ccgl, ]
f = final[final$MTB.field == "germline_consent", ]$GO.field
f = gsub ( " ",".", f)
f = unique ( f )
germline_consent = as.character ( unique ( mini[, f] ) )
germline_consent = ifelse ( germline_consent == "Male", 1, 2)
colnames ( min )
colnames ( mini )
final <- read.xlsx(file.temp , sheet="Data Dictionary", colNames = TRUE)
f = final[final$MTB.field == "germline_consent", ]$GO.field
f = gsub ( " ",".", f)
f = unique ( f )
germline_consent = as.character ( unique ( mini[, f] ) )
germline_consent
germline_consent = ifelse ( germline_consent == "TRUE", 1, 0)
germline_consent
f = final[final$MTB.field == "surg_path_first", ]$GO.field
f = gsub ( " ",".", f)
f = unique ( f )
surg_path_first = as.character ( unique ( mini[, f] ) )
surg_path_first
f
colnames ( mini )
ccgl
surg_path_first
f = final[final$MTB.field == "surg_path_last", ]$GO.field
f = gsub ( " ",".", f)
f = unique ( f )
surg_path_last = as.character ( unique ( mini[, f] ) )
surg_path_last
f = final[final$MTB.field == "hypermut_tumor", ]$GO.field
f = gsub ( " ",".", f)
f = unique ( f )
hypermut_tumor = as.character ( unique ( mini[, f] ) )
f = final[final$MTB.field == "hypermut_tumor", ]$GO.field
f = gsub ( " ",".", f)
f = unique ( f )
hypermut_tumor = as.character ( unique ( mini[, f] ) )
hypermut_tumor
setwd("C:/Users/User/Dropbox/git.hub.stuff/asc.lab/Lectures.workshops.tutorials/workshop.mutation.2019")
