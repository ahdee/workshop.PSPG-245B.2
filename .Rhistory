ls_inline_plots <- file.path(getwd(), paste0(df$ticker, ".png"))
df %>%
## remove cell content for the plot
mutate(Off_by = "") %>%
kbl(booktabs = TRUE) %>%
kable_paper(full_width = FALSE) %>%
column_spec(4, image = spec_image(ls_inline_plots, width = 200, height = 50)) %>%
## RStudio preview does not always show the images, but the final html file shows them
cat(., file = "tbl.html")
df %>%
## remove cell content for the plot
mutate(Off_by = "") %>%
kbl(booktabs = TRUE) %>%
kable_paper(full_width = FALSE) %>%
column_spec(4, image = spec_image(ls_inline_plots, width = 200, height = 50)) %>%
## RStudio preview does not always show the images, but the final html file shows them
cat(., file = "tbl.html")
df %>%
## remove cell content for the plot
mutate(Off_by = "") %>%
kbl(booktabs = TRUE) %>%
kable_paper(full_width = FALSE) %>%
column_spec(4, image = spec_image(ls_inline_plots, width = 200, height = 50))
inline_bars
b = log(1.1) #b is log-odds, approximately GRR for a low prevalence disease
n = 20000
f = 0.4
phi = 0.5
pchisq(qchisq(5e-8, df = 1, lower = F), df = 1, ncp = 2*f*(1-f)*n*phi*(1-phi)*b^2, lower = F)
b = log(1.1) #b is log-odds, approximately GRR for a low prevalence disease
n = 200
f = 0.4
phi = 0.5
pchisq(qchisq(5e-8, df = 1, lower = F), df = 1, ncp = 2*f*(1-f)*n*phi*(1-phi)*b^2, lower = F)
b = log(1.1) #b is log-odds, approximately GRR for a low prevalence disease
n = 2000
f = 0.4
phi = 0.5
pchisq(qchisq(5e-8, df = 1, lower = F), df = 1, ncp = 2*f*(1-f)*n*phi*(1-phi)*b^2, lower = F)
b = log(1.1) #b is log-odds, approximately GRR for a low prevalence disease
n = 20000
f = 0.4
phi = 0.5
pchisq(qchisq(5e-8, df = 1, lower = F), df = 1, ncp = 2*f*(1-f)*n*phi*(1-phi)*b^2, lower = F)
b = log(1.1) #b is log-odds, approximately GRR for a low prevalence disease
n = 20000
f = 0.8
phi = 0.5
pchisq(qchisq(5e-8, df = 1, lower = F), df = 1, ncp = 2*f*(1-f)*n*phi*(1-phi)*b^2, lower = F)
b = log(1.1) #b is log-odds, approximately GRR for a low prevalence disease
n = 20000
f = 0.1
phi = 0.5
pchisq(qchisq(5e-8, df = 1, lower = F), df = 1, ncp = 2*f*(1-f)*n*phi*(1-phi)*b^2, lower = F)
b = log(1.1) #b is log-odds, approximately GRR for a low prevalence disease
n = 20000
f = 0.4
phi = 0.5
pchisq(qchisq(5e-8, df = 1, lower = F), df = 1, ncp = 2*f*(1-f)*n*phi*(1-phi)*b^2, lower = F)
library ( dplyr)
library(rvest)
library(xml2)
library(dplyr)
library(jsonlite)
library ( glue )
library ( data.table)
library(tidyr)
library(scales)
library ( htmlTable )
library(XML)
library(RCurl)
url = 'https://coingolive.com/en/coin/ath-price/'
theurl <- getURL(url,.opts = list(ssl.verifypeer = FALSE) )
tables <- readHTMLTable(theurl)
df = tables[[1]]
df = data.frame ( df )
df$name = gsub ( "\n.*", "", df$X.Cryptocurrency. )
df$`% Price Drop from ATH` = df$X...Price.Drop.Since.ATH.
df$`date since ATH` = gsub ( ".*\n", "", df$X.Date.All.Time.High.)
df = df[ , c("name", "% Price Drop from ATH", "date since ATH")]
coins = unique ( c("BTC", 'ETH', 'BNB','XRP','ADA','SOL','DOT','LUNA','DOGE','AVAX','SHIB','MATIC', 'CRO', "LTC", 'ATOM', 'NEAR'
,'XLM', 'UNI', 'HBAR', 'MANA', 'ICP', 'SAND', 'VET', 'XTZ', 'HNT', 'ONE', 'OSMO', 'ALGO', 'QNT','CAKE', 'LRC', 'JUNO') )
df2 = df[ df$name %in% coins, ]
df2 = df2[ order (df2$`% Price Drop from ATH`), ]
df2 %>% `rownames<-`( NULL )
df2$`date since ATH` = gsub ( 'h.', '', df2$`date since ATH`)
df2$`date since ATH` = gsub ( 'horas', 'hours', df2$`date since ATH`)
df2$`date since ATH` = gsub ( 'mont ', 'months ', df2$`date since ATH`)
htmlTable(df2, rnames = FALSE)
df2$order = as.numeric ( gsub ( "%", "", df2$`% Price Drop from ATH`))
df2 = df2[ order (-df2$order), ]
df2$order = NULL
knitr::kable(df2,  row.names = F, 'pipe')
setwd("C:/Users/LEEA3/Dropbox/git.hub.stuff/asc.lab/workshops/workshop.PSPG-245B.2")
setwd("C:/Users/LEEA3/Dropbox/git.hub.stuff/asc.lab/workshops/workshop.PSPG-245B.2")
library(BiocManager)
setwd("C:/Users/LEEA3/Dropbox/git.hub.stuff/asc.lab/workshops/workshop.PSPG-245B.2")
library ( cgdsr)
library ( ggplot2)
library(knitr)
library(kableExtra)
library ( dplyr)
library ( reshape2)
library(VennDiagram)
library(gridExtra)
library (ggrepel)
library ( DT )
library ( ggpubr )
source("auxi.R")
cbiop = CGDS("http://www.cbioportal.org/")
studies = getCancerStudies(cbiop)
k2( head ( studies, 10) , "example list of data available in cbioportal")
? t.test
setwd("C:/Users/LEEA3/Dropbox/git.hub.stuff/asc.lab/workshops/workshop.PSPG-245B.2")
getwd()
getwd()
dim ( studies ) # dim is a function to tabulate a dataframe
nrow ( studies ) # nrow tells you how many rows
grepl("Breast", studies$name, ignore.case = T )
grepl("Breast", studies$name, ignore.case = T )
breast = studies[ grepl("Breast", studies$name, ignore.case = T ), ]
k2(breast, "list of breast related studies")
datatable ( studies[ grepl("Breast Invasive Carcinoma", studies$name, ignore.case = T )  , ] )
brca.study = "brca_tcga_pub2015"
mycaselist = getCaseLists(cbiop,brca.study)
k2 (mycaselist[ , 1:3] )
View ( mycaselist)
case.list.id = "brca_tcga_pub2015_all"
samples
mysample = mycaselist[ mycaselist$case_list_id == case.list.id, ]$case_ids
mysample = unlist ( strsplit(mysample, " ") )
cat ( samples, sep="\n")
myid = "TCGA-C8-A131-01"
mysample[mysample== myid]
mysample[mysample== myid]
myid = "TCGA-C8-A131-01a"
mysample[mysample== myid]
myid = "TCGA-C8-A131-01"
mysample[mysample== myid]
mysample
intersect ( mysample, myid)
mysample[grepl(myid, mysample)]
length ( mysample)
myclinicaldata = getClinicalData(cbiop,getCaseLists(cbiop,brca.study)[1,1])
myclinicaldata$pid = gsub ( "\\.", "-", row.names(myclinicaldata))
k2 ( t ( myclinicaldata[myclinicaldata$pid %in% myid, ] ))
k2 ( head ( mycaselist[ ,c("case_list_id",	 "case_list_name",	 "case_list_description",	 "cancer_study_id"	)], 50), "list of cases for the BRCA CELL 2015 study" )
t3.study = "brca_tcga_pub2015_trineg"
t3 = mycaselist[ mycaselist$case_list_id == t3.study, ]$case_ids
t3 = unlist ( strsplit(t3, " ") )
her2p.study = "brca_tcga_pub2015_her2pos"
her2p = mycaselist[ mycaselist$case_list_id == her2p.study, ]$case_ids
her2p = unlist ( strsplit(her2p, " ") )
er_neg.study = "brca_tcga_pub2015_erneg"
er_neg = mycaselist[ mycaselist$case_list_id == er_neg.study, ]$case_ids
er_neg = unlist ( strsplit(er_neg, " ") )
er_POS.study = "brca_tcga_pub2015_erpos"
er_POS = mycaselist[ mycaselist$case_list_id == er_POS.study, ]$case_ids
er_POS = unlist ( strsplit(er_POS, " ") )
t3[t3==myid]
her2p[her2p==myid]
er_POS[er_POS==myid]
venn1 = data.frame ( her2p= length ( her2p)
, er_neg= length ( er_POS )
, int= length ( intersect(er_POS,her2p))
)
names ( venn1 )[1:2] = c("Her2+","ER+")
venn.this (
venn1,
type = 2, cp= c("#3C8A9B" , "#9B445D"),
dgg=180
)
age.both = intersect (er_POS,her2p )
age.both
age.both=myclinicaldata[ myclinicaldata$pid %in% age.both, ]$AGE
age.both
age.Her2only.noER = setdiff( her2p, er_POS)
age.Her2only.noER = myclinicaldata[ myclinicaldata$pid %in% age.Her2only.noER, ]$AGE
temp = rbind (
data.frame ( age = age.both, type= rep("both", length(age.both)) )
,data.frame ( age = age.Her2only.noER, type= rep("Heronly", length(age.Her2only.noER)))
)
median ( age.Her2only.noER )
median ( age.both )
t.test( age.Her2only.noER , age.both)
ggplot( temp, aes(x=age, fill=type)) +
geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity') +
scale_fill_manual(values=c("#69b3a2", "#404080"))
mygeneticprofile = getGeneticProfiles(cbiop,brca.study)
k2 ( mygeneticprofile, "types of data available for chosen case" )
mutation = mygeneticprofile[grepl( "Mutation", mygeneticprofile$genetic_profile_name), ]$genetic_profile_id
mutation
mutation = mygeneticprofile[grepl( "Mutation", mygeneticprofile$genetic_profile_name), ]$genetic_profile_id
# qqq what other modalities do you think may be of interest
cna = mygeneticprofile[grepl( "Putative copy", mygeneticprofile$genetic_profile_name),1 ]
exp = mygeneticprofile[grepl( "V2 RSEM", mygeneticprofile$genetic_profile_name),1 ]
exp = exp[ grepl ( "mrna$", exp)]
exp
k2 ( cancer.list[17:25, ], "cancer list")
length ( cancer.gene)
imp = as.character ( cancer.list[grepl("^BRCA|^ATM$|^BARD1$|^CDH1$|^CHEK2$|^NBN$|^NF1$|^PALB2$|^PTEN$|^TP53$", cancer.list$gene), ]$gene )
imp = as.character ( cancer.list[grepl("^BRCA|^ATM$|^BARD1$|^CDH1$|^CHEK2$|^NBN$|^NF1$|^PALB2$|^PTEN$|^TP53$", cancer.list$gene), ]$gene )
# ? why did we add ^ in front and $ for only some genes and not others?
k2 ( cancer.list[cancer.list$gene %in% imp, ], "breast cancer genes")
total = ceiling ( length( cancer.gene)/100  )  *100
mutations = data.frame (   stringsAsFactors = F )
expression = data.frame (   stringsAsFactors = F )
e = 1
for(i in seq(from=150, to=total, by=150) ){
if ( i > length(cancer.gene)){
i = length(cancer.gene)
}
print ( paste ( e, i ))
temp = getMutationData(cbiop , brca.study, mutation, cancer.gene[e:i])
mutations = rbind ( mutations, temp)
Sys.sleep (2) # lets give the system a break
e2 = 1
exp.temp2 = 1
for(i2 in seq(from=150, to=length ( myclinicaldata$pid), by=150)){
exp.temp = getProfileData(cbiop , cancer.gene[e:i]
, exp
, getCaseLists(cbiop,brca.study)[1,1] , myclinicaldata$pid[e2:i2])
if ( exp.temp2 == 1){
exp.temp2 =   t ( exp.temp)
}else {
exp.temp2 =  cbind ( exp.temp2,  t ( exp.temp))
}
e2 = i2+ 1
Sys.sleep (1) # lets give the system a break
}
e = i + 1
expression = rbind ( expression, exp.temp2)
}
dim ( mutations )
mutations$igv = paste ( mutations$chr, mutations$start_position, mutations$end_position, mutations$reference_allele, mutations$variant_allele)
mutations$xvar_link = gsub('getma.org','http://mutationassessor.org/r3', mutations$xvar_link)
mutations$xvar_link_msa = gsub('getma.org','http://mutationassessor.org/r3', mutations$xvar_link_msa )
mutations$xvar_link_pdb = gsub('getma.org','http://mutationassessor.org/r3', mutations$xvar_link_pdb  )
expressionc = df2 <-expression  %>%
select(where(~!all(is.na(.)))) %>% data.frame()
expressionc= data.frame ( log2 ( expressionc + 1 ))
expressionc[1:3, 1;3 ]
expressionc[1:3, 1:3 ]
samples
samplesnice = gsub ( "-",".", samples)
samplesnice
expressionc[ row.names (expressionc ) %in% c(  "TP53" , "KRAS"), samplesnice ]
dim ( expression )
setwd("C:/Users/LEEA3/Dropbox/git.hub.stuff/asc.lab/workshops/workshop.PSPG-245B.2")
do.these = c( "TP53", "BRCA2","PTEN", "BRCA1", "ERBB2", "EGFR"  )
plot.out = list()
for ( gene in do.these  ){
g1 = melt (  expression[gene,  ]  )
colnames ( g1 )= c("pid","value")
g1$pid = gsub ( "\\.","-", g1$pid)
g1$HER2p = ifelse ( g1$pid %in% her2p, "HER2P", "NO.HER2")
g1$value = log2 ( g1$value + 1 )
mann_whit = wilcox.test(g1[g1$HER2p == "NO.HER2", ]$value,
g1[g1$HER2p != "NO.HER2", ]$value
,paired=FALSE)
p = round ( mann_whit$p.value, 2 )
bon = p * length ( do.these )
gthis = ggplot(g1, aes(y=value, x=HER2p, fill=HER2p)) +
geom_violin()+
geom_jitter(shape=19, position=position_jitter(0.07), size=3 ) +
theme_bw() +
ylab("log2 (tpm + 1 ) ") +
xlab("") +
theme(legend.position="none", legend.title=element_blank(), legend.key = element_blank(),
axis.text.y = element_text(size=12),
axis.text.x = element_text(angle = 90, size=11.5),
axis.title.x = element_text(size=22),
axis.title.y     = element_text(size=22),
legend.text      =element_text(size=12)
) + stat_summary(fun.y = mean, fun.ymin = mean, fun.ymax = mean,
geom = "crossbar", width = .5)  + ggtitle ( gene ) +
scale_fill_manual(values = c("#a6cee3","#b2df8a", "#fdbf6f") ) +
ggtitle ( paste ( gene, "p.value", p, "corr", bon ))
plot.out[[gene]] = gthis
#plot ( gthis )
}
do.call("grid.arrange", c(plot.out, ncol=2))
exp = data.frame ( t ( expressionc ))
exp =exp [ , unique ( c( "ERBB2", names ( exp)))]
temp = cor(exp, exp$ERBB2, method="spearman"  )
her2.c = as.numeric(temp )
names ( her2.c) = row.names ( temp )
her2.c = sort ( abs ( her2.c ), decreasing = T )
her2.c = round ( her2.c, 3)
head ( her2.c )
do.these = head ( names ( her2.c ), 7)
do.these = do.these[-1]
plot.out = list()
for ( gene in do.these  ){
gthis = ggplot(exp, aes_string (x="ERBB2", y=gene)) +
geom_point(position = position_jitter(width = 0.5, height = 0.5)) +
geom_smooth(method=lm
, se=FALSE
, fullrange=TRUE
)+
theme_classic() +  stat_cor(method = "spearman") + ggtitle(gene)
plot.out[[gene]] = gthis
#plot ( gthis )
}
do.call("grid.arrange", c(plot.out, ncol=2))
scaled.dat <- data.frame ( t ( scale(exp) ))
myid2 = gsub ( "-", ".", myid )
my.dat = scaled.dat[, myid2, drop=T]
names ( my.dat)= row.names (scaled.dat )
my.dat = sort ( abs ( my.dat ), decreasing = T )
my.dat = round ( my.dat, 3)
gene = names (  my.dat[1] )
g1 = melt (  as.matrix ( expressionc[ gene, ]  ) )
colnames ( g1 )= c("gene","pid","value")
g1 = g1[ order ( g1$value), ]
g1$pid = factor ( g1$pid, levels=g1$pid)
nudge_y = -.5,
) + ggtitle ( paste ( "Expression of ", gene, "relative to all BRCA samples" )  )
names ( my.dat)= row.names (scaled.dat )
my.dat = sort ( abs ( my.dat ), decreasing = T )
my.dat = round ( my.dat, 3)
gene = names (  my.dat[1] )
g1 = melt (  as.matrix ( expressionc[ gene, ]  ) )
colnames ( g1 )= c("gene","pid","value")
g1 = g1[ order ( g1$value), ]
g1$pid = factor ( g1$pid, levels=g1$pid)
ggplot(g1 , aes(x=pid, y=value, color=  value  )) +
geom_bar(stat="identity") +
scale_fill_brewer(palette = "Set1")    +
xlab("") + ylab("") +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()
) + theme_void()  +
geom_text_repel(
data = g1[g1$pid == myid2,  ],
aes(
label = pid
)
,
fontface="bold",
color="black",
size = 5,
nudge_x = 20.15,
box.padding = 1.5,
nudge_y = -.5,
) + ggtitle ( paste ( "Expression of ", gene, "relative to all BRCA samples" )  )
my.dat[my.dat> 1.96 ]
gene = names (  my.dat[my.dat> 1.96 ] )[1:12]
g1 = melt (  as.matrix ( expressionc[ gene, ]  ) )
colnames ( g1 )= c("gene","pid","value")
g1$pid = as.character ( g1$pid)
g1$group = ifelse ( g1$pid == myid2, myid2, "base")
ccc = setNames( c("red", "grey"), c(myid2, "base"))
ggplot(g1, aes(y=value, x=gene , colour=group )) +
geom_violin()+
geom_jitter(shape=19, position=position_jitter(0.07), size=3 ) +
theme_bw() +
ylab("log2 (tpm + 1 ) ") +
xlab("") +
theme(legend.position="bottom", legend.title=element_blank(), legend.key = element_blank(),
axis.text.y = element_text(size=12),
axis.text.x = element_text(angle = 90, size=11.5),
axis.title.x = element_text(size=22),
axis.title.y     = element_text(size=22),
legend.text      =element_text(size=12)
)  + ggtitle ( paste ( "Top expression gene", myid2 ) ) + scale_colour_manual(values=ccc) +
facet_wrap(gene ~., scales = "free" )
dim ( mutations )
names ( mutations )
unique( mutations$mutation_type)
k2 ( data.frame ( table ( mutations$functional_impact_score)  ), "impact scores " )
mt =
nrow ( mutations [ mutations$case_id ==  myid , ] )
mt = mutations [ mutations$case_id ==  myid , ]
mt = mt %>% replace(is.na(.), '')  %>% data.frame()
mt [   mt$functional_impact_score == "H", ]
table (  mt$functional_impact_score)
mt
mt
mt [   mt$functional_impact_score == "H", ]
table (  mt$functional_impact_score)
mt [   mt$functional_impact_score == "H", ]
samples
final =  mutations [ mutations$case_id %in% samples, ]
unique ( final$case_id)
gc()
k2 ( head ( cosmic.70[ grepl("breast",  cosmic.70$description ), ] ), "breast cancer in cosmic")
mutations = merge ( mutations, cosmic.70, by="igv", all.x=T, all.y=F )
nrow ( mutations[ ! is.na ( mutations$description ),  ] ) / nrow (mutations)
k2 ( head ( mutations[ grepl("^BRCA", mutations$gene_symbol), c("amino_acid_change","chr.x","start_position","end_position","reference_allele", "variant_allele",
"gene_symbol","case_id","mutation_status","mutation_type","description")] ) )
mutation.type = data.frame ( table ( mutations$mutation_type))
mutation.type = mutation.type[ order ( mutation.type$Freq), ]
mutation.type$Var1 = factor ( mutation.type$Var1, levels = mutation.type$Var1)
mutation.type
ggplot(mutation.type, aes(Var1,Freq), label=Freq ) +
geom_bar(aes(fill = Freq), stat="identity", position = "dodge") +
coord_flip() +
scale_fill_distiller(palette = "RdBu") + xlab("") + ylab("") +
theme(strip.text.y = element_text(angle = 0), legend.position="none") +
geom_text(aes(label=Freq), position=position_dodge(width=0.9), vjust=.4, hjust = .5, size=5) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
text = element_text(size=16),  # size of label
axis.text.x = element_text(angle=0, hjust=1) ) + ggtitle ( "All mutation types")
dim ( mutations )
str ( mutations )
cosmic.mutation = mutations [ !is.na(mutations$description), ]
mutation.type = data.frame ( table ( cosmic.mutation$mutation_type))
mutation.type = mutation.type[ order ( mutation.type$Freq), ]
mutation.type$Var1 = factor ( mutation.type$Var1, levels = mutation.type$Var1)
ggplot(mutation.type, aes(Var1,Freq), label=Freq ) +
geom_bar(aes(fill = Freq), stat="identity", position = "dodge") +
coord_flip() +
scale_fill_distiller(palette = "RdBu") + xlab("") + ylab("") +
theme(strip.text.y = element_text(angle = 0), legend.position="none") +
geom_text(aes(label=Freq), position=position_dodge(width=0.9), vjust=.4, hjust = .5, size=5) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
text = element_text(size=16),  # size of label
axis.text.x = element_text(angle=0, hjust=1) ) + ggtitle ( "Mutation types found in cosmic")
mutations$dp = mutations$variant_read_count_tumor + mutations$reference_read_count_tumor
quantile ( mutations$dp)
ggplot(mutations, aes(x=dp)) +
geom_density( color="darkblue", fill="steelblue" ) + geom_vline(xintercept = 21, linetype="dotted",
color = "grey", size=1.5) + ggtitle ( " density plot, total depth")
quantile ( mutations$dp)
# before
dim ( mutations )
# after
mutations = mutations[ mutations$dp > 21, ]
dim (mutations )
mutations$af = mutations$variant_read_count_tumor / mutations$dp
ggplot(mutations, aes(x=af)) +
geom_density( color="darkblue", fill="#e8975a" ) + geom_vline(xintercept = .1, linetype="dotted",
color = "grey", size=1.5) + ggtitle ( " density plot, allele freqeuncy")
mutations = mutations[ order ( - mutations$af ) , ]
# clean mut head
cleanmut = c ("igv","dp","af","gene_symbol","case_id",	"mutation_type", "amino_acid_change" , "functional_impact_score"
, "variant_read_count_tumor"	,"reference_read_count_tumor" , "description" )
k2 ( head ( mutations[ , cleanmut], 10) , "top 10 variant ranked by AF")
# lets further filter the mutations with any af > .1
mutations = mutations[ mutations$af > .1, ]
dim (mutations)
mutation.gene = data.frame ( table ( mutations$gene_symbol))
mutation.gene = mutation.gene[ order ( - mutation.gene$Freq), ]
mutation.gene$Var1 = factor ( mutation.gene$Var1, levels = rev ( mutation.gene$Var1) )
ggplot(mutation.gene [ 1:20, ] , aes(Var1,Freq), label=Freq ) +
geom_bar(aes(fill = Freq), stat="identity", position = "dodge") +
coord_flip() +
scale_fill_distiller(palette = "RdBu") + xlab("") + ylab("") +
theme(strip.text.y = element_text(angle = 0), legend.position="none") +
geom_text(aes(label=Freq), position=position_dodge(width=0.9), vjust=.4, hjust = .5, size=5) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
text = element_text(size=16),  # size of label
axis.text.x = element_text(angle=0, hjust=1) ) + ggtitle ( "Most recurrent genes")
imp
# based on literature these are some of the genes involved in breast cancer.
imp
# lets study them and see what types of mutations corresponds most with these genes.
mutation.brca = data.frame ( table ( mutations[ mutations$gene_symbol %in% imp, ] $mutation_type))
mutation.brca = mutation.brca[ order ( mutation.brca$Freq), ]
mutation.brca$Var1 = factor ( mutation.brca$Var1, levels = mutation.brca$Var1)
ggplot(mutation.brca, aes(Var1,Freq), label=Freq ) +
geom_bar(aes(fill = Freq), stat="identity", position = "dodge") +
coord_flip() +
scale_fill_distiller(palette = "RdBu") + xlab("") + ylab("") +
theme(strip.text.y = element_text(angle = 0), legend.position="none") +
geom_text(aes(label=Freq), position=position_dodge(width=0.9), vjust=.4, hjust = .5, size=5) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
text = element_text(size=16),  # size of label
axis.text.x = element_text(angle=0, hjust=1) ) + ggtitle ( "Mutation-types in genes associated with breast cancer")
# here is a 2 sec way to do this.
# simply look in cosmic to see how often these genes appears in breast cancer.
imp.brac = data.frame ( table ( mutations[ grepl( "breast", mutations$description), ]$gene_symbol ) )
imp.brac$fraction = imp.brac$Freq / nrow ( mutations)
imp.brac = imp.brac [ order ( -imp.brac$fraction) , ]
k2 ( head ( imp.brac, 10), "top cosmic genes found in breast cancer")
top5 = as.character ( imp.brac$Var1[1:5] )
top5 = mutations[ mutations$gene_symbol %in% top5, ]$amino_acid_change
top5 = data.frame ( table ( top5 ) )
top5 = top5 [ order ( - top5$Freq), ]
# quick hack to add url, will not work with *
top5$url = paste0(url,top5$top5)
k2 ( head ( top5, 20), "top 20 recurrent mutations")
mutations$drug = paste ( mutations$gene_symbol, mutations$amino_acid_change)
action = drug[ drug$match %in% unique ( mutations$drug  ), ]
action.f = c("gene" ,"variant" , "disease", "drugs", "evidence_type",
"clinical_significance", "evidence_statement", "evidence_civic_url", "gene_civic_url" , "match"
)
k2 ( head ( action[ ,action.f], 20) ,"example of actionable mutations in the BRCA set" )
actionid = drug[ drug$match %in% unique ( mutations[mutations$case_id == myid, ]  $drug  ), ]
actionid = actionid %>% dplyr::group_by(variant) %>%
dplyr::summarise(
gene = paste(unique ( gene ), collapse = "," ) ,
disease = paste(unique ( disease ), collapse = "," ),
clinical_significance =  paste(unique ( clinical_significance ), collapse = "," ),
drugs = paste(unique ( drugs ), collapse = "," )
) %>%
data.frame()
k2( actionid, myid)
