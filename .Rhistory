library(colorspace)
install.packages("colorspace")
# let's get the clusters
library(dynamicTreeCut)
data(iris)
x  <- iris[,-5] %>% as.matrix
hc <- x %>% dist %>% hclust
dend <- hc %>% as.dendrogram
# Find special clusters:
clusters <- cutreeDynamic(hc, distM = as.matrix(dist(x)), method = "tree")
# we need to sort them to the order of the dendrogram:
clusters <- clusters[order.dendrogram(dend)]
clusters_numbers <- unique(clusters) - (0 %in% clusters)
n_clusters <- length(clusters_numbers)
library(colorspace)
cols <- rainbow_hcl(n_clusters)
true_species_cols <- rainbow_hcl(3)[as.numeric(iris[,][order.dendrogram(dend),5])]
dend2 <- dend %>%
branches_attr_by_clusters(clusters, values = cols) %>%
color_labels(col =   true_species_cols)
plot(dend2)
clusters <- factor(clusters)
levels(clusters)[-1]  <- cols[-5][c(1,4,2,3)]
# Get the clusters to have proper colors.
# fix the order of the colors to match the branches.
colored_bars(clusters, dend, sort_by_labels_order = FALSE)
install.packages("dynamicTreeCut")
# let's get the clusters
library(dynamicTreeCut)
data(iris)
x  <- iris[,-5] %>% as.matrix
hc <- x %>% dist %>% hclust
dend <- hc %>% as.dendrogram
# Find special clusters:
clusters <- cutreeDynamic(hc, distM = as.matrix(dist(x)), method = "tree")
# we need to sort them to the order of the dendrogram:
clusters <- clusters[order.dendrogram(dend)]
clusters_numbers <- unique(clusters) - (0 %in% clusters)
n_clusters <- length(clusters_numbers)
library(colorspace)
cols <- rainbow_hcl(n_clusters)
true_species_cols <- rainbow_hcl(3)[as.numeric(iris[,][order.dendrogram(dend),5])]
dend2 <- dend %>%
branches_attr_by_clusters(clusters, values = cols) %>%
color_labels(col =   true_species_cols)
plot(dend2)
clusters <- factor(clusters)
levels(clusters)[-1]  <- cols[-5][c(1,4,2,3)]
# Get the clusters to have proper colors.
# fix the order of the colors to match the branches.
colored_bars(clusters, dend, sort_by_labels_order = FALSE)
# let's get the clusters
library(dynamicTreeCut)
data(iris)
x  <- iris[,-5] %>% as.matrix
hc <- x %>% dist %>% hclust
dend <- hc %>% as.dendrogram
# let's get the clusters
library(dynamicTreeCut)
data(iris)
x  <- iris[,-5] %>% as.matrix
library ( dplyr)
data(iris)
x  <- iris[,-5] %>% as.matrix
hc <- x %>% dist %>% hclust
dend <- hc %>% as.dendrogram
# Find special clusters:
clusters <- cutreeDynamic(hc, distM = as.matrix(dist(x)), method = "tree")
# we need to sort them to the order of the dendrogram:
clusters <- clusters[order.dendrogram(dend)]
clusters_numbers <- unique(clusters) - (0 %in% clusters)
n_clusters <- length(clusters_numbers)
library(colorspace)
cols <- rainbow_hcl(n_clusters)
true_species_cols <- rainbow_hcl(3)[as.numeric(iris[,][order.dendrogram(dend),5])]
dend2 <- dend %>%
branches_attr_by_clusters(clusters, values = cols) %>%
color_labels(col =   true_species_cols)
plot(dend2)
clusters <- factor(clusters)
levels(clusters)[-1]  <- cols[-5][c(1,4,2,3)]
# Get the clusters to have proper colors.
# fix the order of the colors to match the branches.
colored_bars(clusters, dend, sort_by_labels_order = FALSE)
# Find special clusters:
clusters <- cutreeDynamic(hc, distM = as.matrix(dist(x)), method = "tree")
# we need to sort them to the order of the dendrogram:
clusters <- clusters[order.dendrogram(dend)]
clusters_numbers <- unique(clusters) - (0 %in% clusters)
n_clusters <- length(clusters_numbers)
library(colorspace)
install.packages("colorspace")
remove.packages(colorspaces)
library(colorspace)
library(chimeraviz)
soapap9 <- system.file(
"extdata",
"./single/ASC42.final.Fusion.specific.for.genes",
package="chimeraviz")
fusions <- import_soapfuse(soapap9, "hg19", 10)
library(chimeraviz)
rm.package(Gviz)
remove.packages(Gviz)
remove.packages("Gviz")
install.packages('https://bioconductor.org/packages/devel/bioc/bin/windows/contrib/3.5/Gviz_1.25.0.zip', repos = NULL, type = "win.binary")
library(chimeraviz)
remove.packages("IRanges")
install.packages('https://bioconductor.org/packages/devel/bioc/bin/windows/contrib/3.5/IRanges_2.15.18.zip', repos = NULL, type = "win.binary")
library(chimeraviz)
library ( IRanges )
library(chimeraviz)
remove.packages("IRanges")
library ( IRanges )
remove.packages("IRanges")
library ( "IRanges")
install.packages('https://bioconductor.org/packages/release/bioc/bin/windows/contrib/3.5/IRanges_2.14.12.zip', repos = NULL, type = "win.binary")
library(chimeraviz)
remove.packages("IRanges")
install.packages('https://bioconductor.org/packages/release/bioc/src/contrib/IRanges_2.14.12.tar.gz', repos = NULL, type = "source")
source("https://bioconductor.org/biocLite.R")
biocLite(c (
"IRanges "
))
install.packages('https://bioconductor.org/packages/release/bioc/src/contrib/IRanges_2.14.12.tar.gz', repos = NULL, type = "source")
install.packages('https://bioconductor.org/packages/release/bioc/src/contrib/IRanges_2.14.12.tar.gz', repos = NULL, type = "source")
?try
g1 = data.frame (
gene = c( "a","a","a","b"),
value = c(1,2,3,5)
)
g1
g1 %>%
group_by(gene) %>%
dplyr::summarize(
median = mn ( value )[1],
mean = mn ( value )[2]
) %>%
data.frame()
library ( dplyr)
library ( dplyr)
mn <- function ( x ){
return  ( c( median(x), mean(x) ))
}
g1 = data.frame (
gene = c( "a","a","a","b"),
value = c(1,2,3,5)
)
g1 %>%
group_by(gene) %>%
dplyr::summarize(
median = mn ( value )[1],
mean = mn ( value )[2]
) %>%
data.frame()
g1 = data.frame (
gene = c( "a","a","a","b"),
value = c(1,200,3,5)
)
g1 %>%
group_by(gene) %>%
dplyr::summarize(
median = mn ( value )[1],
mean = mn ( value )[2]
) %>%
data.frame()
g1 = data.frame (
gene = c( "a","a","a","a","b"),
value = c(1,200,3,5,0)
)
g1 %>%
group_by(gene) %>%
dplyr::summarize(
median = mn ( value )[1],
mean = mn ( value )[2]
) %>%
data.frame()
g1 = data.frame (
gene = c( "a","a","a","a","b"),
value = c(1,200,3,5,0)
)
g1
g1 %>% group_by(gene) %>%
do(data.frame(t(mn(.$value)))) %>%
data.frame()
library ( dplyr)
mn <- function ( x ){
return  ( list ( med=median(x), mn = mean(x) ))
}
g1 = data.frame (
gene = c( "a","a","a","a","b"),
value = c(1,200,3,5,0)
)
g1 %>%
group_by(gene) %>%
dplyr::summarize(
median = mn ( value )[1],
mean = mn ( value )[2]
) %>%
data.frame()
g1 %>% group_by(gene) %>%
do(data.frame(t(mn(.$value)))) %>%
data.frame()
library(httr)
library(jsonlite)
library(xml2)
library(biomaRt)
# define biomart object
mart <- biomaRt::useMart(biomart = "ensembl", dataset = "hsapiens_gene_ensembl")
t2g <- biomaRt::getBM(attributes = c("ensembl_transcript_id", "ensembl_gene_id", "entrezgene",
"external_gene_name","ensembl_peptide_id"), mart = mart)
head ( t2g )
t2g[t2g$external_gene_name == "DUSP2", ]
pr = t2g[t2g$external_gene_name == "DUSP2", ]$ensembl_peptide_id
pr = unique ( pr )
aa = "301..301"
ext <- paste0( "/map/translation/",ENSP00000288943,"/",aa,"?")
ext <- paste0( "/map/translation/",pr,"/",aa,"?")
ext
pr
pr = unique ( pr[1] )
pr
ext <- paste0( "/map/translation/",pr,"/",aa,"?")
ext
r <- GET(paste(server, ext, sep = ""), content_type("application/json"))
stop_for_status(r)
# use this if you get a simple nested list back, otherwise inspect its structure
# head(data.frame(t(sapply(content(r),c))))
head(fromJSON(toJSON(content(r))))
server <- "https://rest.ensembl.org"
ext <- paste0( "/map/translation/",pr,"/",aa,"?")
r <- GET(paste(server, ext, sep = ""), content_type("application/json"))
stop_for_status(r)
# use this if you get a simple nested list back, otherwise inspect its structure
# head(data.frame(t(sapply(content(r),c))))
head(fromJSON(toJSON(content(r))))
# use this if you get a simple nested list back, otherwise inspect its structure
# head(data.frame(t(sapply(content(r),c))))
fromJSON(toJSON(content(r)))
# use this if you get a simple nested list back, otherwise inspect its structure
# head(data.frame(t(sapply(content(r),c))))
df = data.frame ( fromJSON(toJSON(content(r))) )
df
gene = "CHD2"
aa = "721..721"
pr = t2g[t2g$external_gene_name == gene, ]$ensembl_peptide_id
pr = unique ( pr[1] )
server <- "https://rest.ensembl.org"
ext <- paste0( "/map/translation/",pr,"/",aa,"?")
r <- GET(paste(server, ext, sep = ""), content_type("application/json"))
stop_for_status(r)
# use this if you get a simple nested list back, otherwise inspect its structure
# head(data.frame(t(sapply(content(r),c))))
df = data.frame ( fromJSON(toJSON(content(r))) )
df
gene = "PTPRD"
aa = "1023..1023"
pr = t2g[t2g$external_gene_name == gene, ]$ensembl_peptide_id
pr = unique ( pr[1] )
server <- "https://rest.ensembl.org"
ext <- paste0( "/map/translation/",pr,"/",aa,"?")
r <- GET(paste(server, ext, sep = ""), content_type("application/json"))
stop_for_status(r)
# use this if you get a simple nested list back, otherwise inspect its structure
# head(data.frame(t(sapply(content(r),c))))
df = data.frame ( fromJSON(toJSON(content(r))) )
df
gene = "TP53"
aa = "175..175"
pr = t2g[t2g$external_gene_name == gene, ]$ensembl_peptide_id
pr = unique ( pr[1] )
server <- "https://rest.ensembl.org"
ext <- paste0( "/map/translation/",pr,"/",aa,"?")
r <- GET(paste(server, ext, sep = ""), content_type("application/json"))
stop_for_status(r)
# use this if you get a simple nested list back, otherwise inspect its structure
# head(data.frame(t(sapply(content(r),c))))
df = data.frame ( fromJSON(toJSON(content(r))) )
# its difficult to tell exactly if end or start so roughly 3 bp
df$mappings.start
df$mappings.end
df$mappings.seq_region_name # this is the chr
setwd("C:/Users/User/Dropbox/git.hub.stuff/asc.lab/workshops/workshop.mutation.2019")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library ( cgdsr)
library ( ggplot2)
library(knitr)
library(kableExtra)
source("auxi.R")
# initiate cbioportal
cbiop = CGDS("http://www.cbioportal.org/public-portal/")
# Chunk 3
# Get list of cancer studies at server
studies = getCancerStudies(cbiop)
# lets take a look at it.
k2( head ( studies, 10) )
# what columns are in here, this gives you an idea what the dataframe consist of.
names ( studies )
# lets find how many unique sets are in here
dim ( studies )
# so it looks like 240 studies
# Find the dataset you want.
# According to the syllabus we are looking for TCGA study on breast cancer from Cell, 2015
# so lets search for it using the grepl function
breast = studies[ grepl("Breast", studies$name, ignore.case = T ), ]
k2(breast)
### BONUS EXERCISE: Level 1:  TRY TO FIND SOME OTHER CANCER GROUP, eg Lung Cancer
# from there we find what we are looking for and its called, brca_tcga_pub2015
brca.study = "brca_tcga_pub2015"
# lets see if you sample is in here.
mycaselist = getCaseLists(cbiop,brca.study)
# first lets study what is in the case list.
k2 ( head ( mycaselist, 10) )
# here we see that brca_tcga_pub2015_3way_complete is probably the best to use because it includes
# only All Complete Tumors vs something like All tumor samples with methylation data
case.list.id = "brca_tcga_pub2015_3way_complete"
### BONUS EXERCISE: Level 2: count the total categories available for this set.
# ok now using All Complete Tumors lets see if your sample is present.
mysample = mycaselist[ mycaselist$case_list_id == case.list.id, ]$case_ids
mysample[ grepl("TCGA-OL-A66K-01", mysample)]
mysample[ grepl("TCGA-FAKE-A66K-01", mysample)]
### BONUS EXERCISE: Level 1: search for you sample and see if its there.
### Level 3: BONUS EXERCISE: loop through each one and find the the samples that All tumor samples with methylation data AND either in ER- breast tumors OR Her2-positive breast tumors
# Now lets see what information is available for your study
mygeneticprofile = getGeneticProfiles(cbiop,brca.study)
k2 ( mygeneticprofile )
# so looking at that we now know it contains several interesting modalities.  Lets try the mutation
mutation = mygeneticprofile[11, 1]
# Chunk 4
# ok now we can get the actual mutation data. However first lets download a set of genes that are known cancer genes
# grab this from cosmic
cosmic = read.csv("https://www.dropbox.com/s/naheek0wicegf77/cancer.list.csv?dl=1")
### lets talk a little bit here about pathogenic mutations.
# take a look at our list and lets go over it quickly
k2 ( head (cosmic ))
cancer.gene = as.character ( unique ( cosmic$gene) )
length( cancer.gene)
# as you can see there are 719 genes.
# lets see if BRCA is in here to make sure!
cosmic[grepl("^BRCA|^ATM$|^BARD1$|^CDH1$|^CHEK2$|^NBN$|^NF1$|^PALB2$|^PTEN$", cosmic$gene), ]
# BONUS why did we add ^ in front and $ for only some genes and not others?
### BONUS can you check if your favorite gene is in here?
# Chunk 5
# lets collect this through a loop so not to overwhelm the system
# its important to be mindful of resources when mining data.  We need to play nice and consider the server load.
total = ceiling ( length( cancer.gene)/100  )  *100
mutations = data.frame (   stringsAsFactors = F )
e = 1
for(i in seq(from=200, to=total, by=200)){
if ( i > length(cancer.gene)){
i = length(cancer.gene)
}
print ( paste ( e, i ))
temp = getMutationData(cbiop , brca.study, mutation, cancer.gene[e:i])
e = i
mutations = rbind ( mutations, temp)
Sys.sleep (2) # lets give the system a break
}
dim ( mutations )
colnames ( mutations )
# lets take a few minutes here to go over the different fields.
# lets check if ALL your samples are availble
samples = c("TCGA-C8-A3M7-01","TCGA-GM-A2D9-01","TCGA-BH-A1FL-01", "TCGA-E2-A14Z-01","TCGA-BH-A1FC-01","TCGA-AC-A2QJ-01", "TCGA-EW-A1P8-01","TCGA-E2-A1LE-01","TCGA-E2-A1LK-01","TCGA-AC-A2FE-01")
final =  mutations [ mutations$case_id %in% samples, ]
unique ( final$case_id)
saveRDS(mutations, "BRCA.rds")
unique ( final$case_id)
unique ( mutations$mutation_type)
mutation.type = data.frame ( table ( mutations$mutation_type))
mutation.type = mutation.type[ order ( mutation.type$Freq), ]
mutation.type$Var1 = factor ( mutation.type$Var1, levels = mutation.type$Var1)
ggplot(mutation.type, aes(Var1,Freq), label=Freq ) +
geom_bar(aes(fill = Freq), stat="identity", position = "dodge") +
coord_flip() +
scale_fill_distiller(palette = "RdBu") + xlab("") + ylab("") +
theme(strip.text.y = element_text(angle = 0), legend.position="none") +
geom_text(aes(label=Freq), position=position_dodge(width=0.9), vjust=.4, hjust = .5, size=5) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
text = element_text(size=16),  # size of label
axis.text.x = element_text(angle=0, hjust=1) )
mutation.brca = data.frame ( table ( mutations[ grepl("BRCA", mutations$gene_symbol), ] $mutation_type))
mutation.brca = mutation.brca[ order ( mutation.brca$Freq), ]
mutation.brca$Var1 = factor ( mutation.brca$Var1, levels = mutation.brca$Var1)
ggplot(mutation.brca, aes(Var1,Freq), label=Freq ) +
geom_bar(aes(fill = Freq), stat="identity", position = "dodge") +
coord_flip() +
scale_fill_distiller(palette = "RdBu") + xlab("") + ylab("") +
theme(strip.text.y = element_text(angle = 0), legend.position="none") +
geom_text(aes(label=Freq), position=position_dodge(width=0.9), vjust=.4, hjust = .5, size=5) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
text = element_text(size=16),  # size of label
axis.text.x = element_text(angle=0, hjust=1) )
names ( mutations )
head ( mutations )
setwd("C:/Users/User/Dropbox/git.hub.stuff/asc.lab/workshops/workshop.mutation.2019")
k2( head ( studies, 10) )
k2 ( head (cosmic ))
head ( mutations )
hist ( mutations$variant_read_count_normal  )
hist ( mutations$reference_read_count_tumor)
length ( unique ( mutations$case_id))
k2(breast)
names ( mutations )
