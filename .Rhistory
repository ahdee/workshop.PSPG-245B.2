remove.packages("IRanges")
library ( "IRanges")
install.packages('https://bioconductor.org/packages/release/bioc/bin/windows/contrib/3.5/IRanges_2.14.12.zip', repos = NULL, type = "win.binary")
library(chimeraviz)
remove.packages("IRanges")
install.packages('https://bioconductor.org/packages/release/bioc/src/contrib/IRanges_2.14.12.tar.gz', repos = NULL, type = "source")
source("https://bioconductor.org/biocLite.R")
biocLite(c (
"IRanges "
))
install.packages('https://bioconductor.org/packages/release/bioc/src/contrib/IRanges_2.14.12.tar.gz', repos = NULL, type = "source")
install.packages('https://bioconductor.org/packages/release/bioc/src/contrib/IRanges_2.14.12.tar.gz', repos = NULL, type = "source")
?try
g1 = data.frame (
gene = c( "a","a","a","b"),
value = c(1,2,3,5)
)
g1
g1 %>%
group_by(gene) %>%
dplyr::summarize(
median = mn ( value )[1],
mean = mn ( value )[2]
) %>%
data.frame()
library ( dplyr)
library ( dplyr)
mn <- function ( x ){
return  ( c( median(x), mean(x) ))
}
g1 = data.frame (
gene = c( "a","a","a","b"),
value = c(1,2,3,5)
)
g1 %>%
group_by(gene) %>%
dplyr::summarize(
median = mn ( value )[1],
mean = mn ( value )[2]
) %>%
data.frame()
g1 = data.frame (
gene = c( "a","a","a","b"),
value = c(1,200,3,5)
)
g1 %>%
group_by(gene) %>%
dplyr::summarize(
median = mn ( value )[1],
mean = mn ( value )[2]
) %>%
data.frame()
g1 = data.frame (
gene = c( "a","a","a","a","b"),
value = c(1,200,3,5,0)
)
g1 %>%
group_by(gene) %>%
dplyr::summarize(
median = mn ( value )[1],
mean = mn ( value )[2]
) %>%
data.frame()
g1 = data.frame (
gene = c( "a","a","a","a","b"),
value = c(1,200,3,5,0)
)
g1
g1 %>% group_by(gene) %>%
do(data.frame(t(mn(.$value)))) %>%
data.frame()
library ( dplyr)
mn <- function ( x ){
return  ( list ( med=median(x), mn = mean(x) ))
}
g1 = data.frame (
gene = c( "a","a","a","a","b"),
value = c(1,200,3,5,0)
)
g1 %>%
group_by(gene) %>%
dplyr::summarize(
median = mn ( value )[1],
mean = mn ( value )[2]
) %>%
data.frame()
g1 %>% group_by(gene) %>%
do(data.frame(t(mn(.$value)))) %>%
data.frame()
library(httr)
library(jsonlite)
library(xml2)
library(biomaRt)
# define biomart object
mart <- biomaRt::useMart(biomart = "ensembl", dataset = "hsapiens_gene_ensembl")
t2g <- biomaRt::getBM(attributes = c("ensembl_transcript_id", "ensembl_gene_id", "entrezgene",
"external_gene_name","ensembl_peptide_id"), mart = mart)
head ( t2g )
t2g[t2g$external_gene_name == "DUSP2", ]
pr = t2g[t2g$external_gene_name == "DUSP2", ]$ensembl_peptide_id
pr = unique ( pr )
aa = "301..301"
ext <- paste0( "/map/translation/",ENSP00000288943,"/",aa,"?")
ext <- paste0( "/map/translation/",pr,"/",aa,"?")
ext
pr
pr = unique ( pr[1] )
pr
ext <- paste0( "/map/translation/",pr,"/",aa,"?")
ext
r <- GET(paste(server, ext, sep = ""), content_type("application/json"))
stop_for_status(r)
# use this if you get a simple nested list back, otherwise inspect its structure
# head(data.frame(t(sapply(content(r),c))))
head(fromJSON(toJSON(content(r))))
server <- "https://rest.ensembl.org"
ext <- paste0( "/map/translation/",pr,"/",aa,"?")
r <- GET(paste(server, ext, sep = ""), content_type("application/json"))
stop_for_status(r)
# use this if you get a simple nested list back, otherwise inspect its structure
# head(data.frame(t(sapply(content(r),c))))
head(fromJSON(toJSON(content(r))))
# use this if you get a simple nested list back, otherwise inspect its structure
# head(data.frame(t(sapply(content(r),c))))
fromJSON(toJSON(content(r)))
# use this if you get a simple nested list back, otherwise inspect its structure
# head(data.frame(t(sapply(content(r),c))))
df = data.frame ( fromJSON(toJSON(content(r))) )
df
gene = "CHD2"
aa = "721..721"
pr = t2g[t2g$external_gene_name == gene, ]$ensembl_peptide_id
pr = unique ( pr[1] )
server <- "https://rest.ensembl.org"
ext <- paste0( "/map/translation/",pr,"/",aa,"?")
r <- GET(paste(server, ext, sep = ""), content_type("application/json"))
stop_for_status(r)
# use this if you get a simple nested list back, otherwise inspect its structure
# head(data.frame(t(sapply(content(r),c))))
df = data.frame ( fromJSON(toJSON(content(r))) )
df
gene = "PTPRD"
aa = "1023..1023"
pr = t2g[t2g$external_gene_name == gene, ]$ensembl_peptide_id
pr = unique ( pr[1] )
server <- "https://rest.ensembl.org"
ext <- paste0( "/map/translation/",pr,"/",aa,"?")
r <- GET(paste(server, ext, sep = ""), content_type("application/json"))
stop_for_status(r)
# use this if you get a simple nested list back, otherwise inspect its structure
# head(data.frame(t(sapply(content(r),c))))
df = data.frame ( fromJSON(toJSON(content(r))) )
df
gene = "TP53"
aa = "175..175"
pr = t2g[t2g$external_gene_name == gene, ]$ensembl_peptide_id
pr = unique ( pr[1] )
server <- "https://rest.ensembl.org"
ext <- paste0( "/map/translation/",pr,"/",aa,"?")
r <- GET(paste(server, ext, sep = ""), content_type("application/json"))
stop_for_status(r)
# use this if you get a simple nested list back, otherwise inspect its structure
# head(data.frame(t(sapply(content(r),c))))
df = data.frame ( fromJSON(toJSON(content(r))) )
# its difficult to tell exactly if end or start so roughly 3 bp
df$mappings.start
df$mappings.end
df$mappings.seq_region_name # this is the chr
x <- list("a" = 2.5, "b" = TRUE, "c" = 1:3)
x[["a"]]
y <- list("a1" = 2.5, "b1" = TRUE, "c1" = 1:3)
x = list ( y, x )
x
x[["a"]]
x <- list("a" = 2.5, "b" = TRUE, "c" = 1:3)
y <- list("a1" = 2.5, "b1" = TRUE, "c1" = 1:3)
x = c ( y, x )
x
x[["a"]]
head ( action )
setwd("C:/Users/User/Dropbox/git.hub.stuff/asc.lab/workshops/workshop.mutation.2019")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library ( cgdsr)
library ( ggplot2)
library(knitr)
library(kableExtra)
source("auxi.R")
# initiate cbioportal
cbiop = CGDS("http://www.cbioportal.org/")
# Chunk 3
# Get list of cancer studies at server
studies = getCancerStudies(cbiop)
# lets take a look at it.
k2( head ( studies, 10) , "example list of data available in cbioportal")
# ? what do you think each column represents
# ? how do you think we can use this to look for our dataset
# ? what is the "10" for in the function.
# lets find how many unique sets are in here
dim ( studies )
# ? How many studies are there currently in cbioportal
# Find the dataset you want.
# According to the syllabus we are looking for TCGA study on breast cancer from Cell, 2015
# ? How do you think we can locate this based on what we know above
# so lets search for it using the grepl function
breast = studies[ grepl("Breast", studies$name, ignore.case = T ), ]
# ? what is the T for what if you use lower case instead of upper case
k2(breast, "list of breast related studies")
### First BONUS question! try to find if there are other cancer data you might interested in, eg Lung Cancer
# from the table we now know that the study brca_tcga_pub2015 is what we need
brca.study = "brca_tcga_pub2015"
# now that we have a case id we can search to see what types of samples are available AND types of data
mycaselist = getCaseLists(cbiop,brca.study)
# first lets study what is in the case list.
k2 ( head ( mycaselist[ ,c("case_list_id",	 "case_list_name",	 "case_list_description",	 "cancer_study_id"	)], 50), "list of cases for the BRCA CELL 2015 study" )
# ? can you tell us what each of the column mean based on what is outputed?
# ? Which data do you think is most relevant this workshop?
# here we see that brca_tcga_pub2015_3way_complete is probably the best to use because it includes
# All Complete Tumors vs something like All tumor samples with methylation data sinc we don't care about methylation in this exercise
case.list.id = "brca_tcga_pub2015_3way_complete"
# ok now using All Complete Tumors lets see if your sample is present.
mysample = mycaselist[ mycaselist$case_list_id == case.list.id, ]$case_ids
mysample = unlist ( strsplit(mysample, " ") )
# ? mysample variable now contains all the TCGA samples in this study, can you check if your sample is exists?
# here is the list
samples
# here I randomely chose a TCGA ID
mysample[mysample== "TCGA-AC-A2BK-01"]
# here is another way
intersect ( mysample, "TCGA-AC-A2BK-01")
# ? why did we not use grepl this time around?
# hint str ( mysample)
### Now lets check if it matches with what is reported: 816
length ( mysample)
### Bonus how would you figure out which of these samples are Triple-negative breast tumors.
# hint look at the caselist and work backwards using the intersect function
# Now lets see what information is available for your study
mygeneticprofile = getGeneticProfiles(cbiop,brca.study)
k2 ( mygeneticprofile, "types of data available for chosen case" )
#? based on lecture what information do you think is missing from this table.
# hint, has to do with alignment to a reference
# so looking at that we now know it contains several interesting modalities.  Lets try the mutation
mutation = mygeneticprofile[11, 1]
# ? what does [11, 1] mean
# ? what other modalities do you think may be of interest
cna = mygeneticprofile[3,1]
# Chunk 4
# lets collect this through a loop so not to overwhelm the system
# its important to be mindful of resources when mining data.  We need to play nice and consider the server load.
# ? what do you think we can do to miminize server load?
total = ceiling ( length( cancer.gene)/100  )  *100
mutations = data.frame (   stringsAsFactors = F )
e = 1
for(i in seq(from=200, to=total, by=200)){
if ( i > length(cancer.gene)){
i = length(cancer.gene)
}
print ( paste ( e, i ))
temp = getMutationData(cbiop , brca.study, mutation, cancer.gene[e:i])
e = i
mutations = rbind ( mutations, temp)
Sys.sleep (2) # lets give the system a break
}
# create coordinates
mutations$igv = paste ( mutations$chr, mutations$start_position, mutations$end_position, mutations$reference_allele, mutations$variant_allele)
# there is an error in the mutation table.  The links are obsolete.  Here we fix it.
# http://mutationassessor.org/r3
mutations$xvar_link = gsub('getma.org','http://mutationassessor.org/r3', mutations$xvar_link)
mutations$xvar_link_msa = gsub('getma.org','http://mutationassessor.org/r3', mutations$xvar_link_msa )
mutations$xvar_link_pdb = gsub('getma.org','http://mutationassessor.org/r3', mutations$xvar_link_pdb  )
# Chunk 5
dim ( mutations )
# lets take a few minutes here to go over the different fields.
names ( mutations )
?getMutationData
# ? based on the lecture previously can identify the different mutation_type
# ? based on the lecture previously can you figure out what each of these mean?
# for example which of these is a nonsynonymous substitution
# ? for druggability which one of these do you think its more likely to be useful
unique( mutations$mutation_type)
# ? can you guess what is functional_impact_score
k2 ( data.frame ( table ( mutations$functional_impact_score)  ), "impact scores " )
# Bonus make sure that your sample has mutations.
nrow ( mutations [ mutations$case_id == "TCGA-AC-A2BK-01", ] )
# ? if you have more than one sample, say you want to check all 10 samples in the class, how would you do this?
samples
final =  mutations [ mutations$case_id %in% samples, ]
unique ( final$case_id)
# so as you can see above there are a total of 10 unique samples.
# lets clear up junk
gc()
# Chunk 6
# One easy approach is to look for "cancer" related genes that had already been implicated in cancer.
# ? how do you think we can do that?
k2 ( cancer.list[17:25, ], "cancer list")
# ? can you recall what is exome sequencing and why its important?
# lets check this list to make sure genes that are relevant to breast cancer exists
imp = as.character ( cancer.list[grepl("^BRCA|^ATM$|^BARD1$|^CDH1$|^CHEK2$|^NBN$|^NF1$|^PALB2$|^PTEN$", cancer.list$gene), ]$gene )
# ? why did we add ^ in front and $ for only some genes and not others?
k2 ( cancer.list[cancer.list$gene %in% imp, ], "breast cancer genes")
# ? based on this which panel do you think is weakest for breast cancer and why do you think that is the case?
# Bonus: can you check if BRCA is present in any of the mutations we just downloaded?
k2 ( head ( mutations[ grepl("^BRCA", mutations$gene_symbol), ] ), "BRCA gene mutations" )
# lets see how many genes do we have all together
nrow ( cancer.list )
### BONUS can you check if your favorite gene is in here?
# Another way we can detect important mutations is to see if other resources are available.
# do you know of any institutions that might have this information.
k2 ( head ( cosmic.70[ grepl("breast",  cosmic.70$description ), ] ), "breast cancer in cosmic")
# ? what do you think the 70 means?
# lets integrate cosmic into our mutation table
mutations = merge ( mutations, cosmic.70, by="igv", all.x=T, all.y=F )
# ? why do you think all.x = T and all.y=F
# let us find out how many mutations we have that is also found in cosmic
nrow ( mutations[ ! is.na ( mutations$description ),  ] ) / nrow (mutations)
# ? wow thats a huge ratio , why do think the ratio is so high?
# BONUS check if cosmic contain BRCA mutations.  This is a good sanity check.
k2 ( head ( mutations[ grepl("^BRCA", mutations$gene_symbol), c("chr.x","start_position","end_position","reference_allele", "variant_allele",
"gene_symbol","case_id","mutation_status","mutation_type","description")] ) )
# BONUS go to https://cancer.sanger.ac.uk/cosmic and compare results of line 4
# https://cancer.sanger.ac.uk/cosmic/search?q=3813722
# ? does everything match
# ? why do you think the the coordinates are off by 1
# BONUS can you find all BRCA mutation that is Missense_Mutation AND found is cosmic?
# hint, mutations$mutation_type == "Missense_Mutation"
# Chunk 7
# lets tabulate the types of mutations mostly seen with Breast cancer
mutation.type = data.frame ( table ( mutations$mutation_type))
mutation.type = mutation.type[ order ( mutation.type$Freq), ]
mutation.type$Var1 = factor ( mutation.type$Var1, levels = mutation.type$Var1)
ggplot(mutation.type, aes(Var1,Freq), label=Freq ) +
geom_bar(aes(fill = Freq), stat="identity", position = "dodge") +
coord_flip() +
scale_fill_distiller(palette = "RdBu") + xlab("") + ylab("") +
theme(strip.text.y = element_text(angle = 0), legend.position="none") +
geom_text(aes(label=Freq), position=position_dodge(width=0.9), vjust=.4, hjust = .5, size=5) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
text = element_text(size=16),  # size of label
axis.text.x = element_text(angle=0, hjust=1) ) + ggtitle ( "BRCA mutation types")
# ? seems like missense mutation is the most recurrent.  Can you think of any way to clean up the data
# ? in the lecture we talked about depth.  So lets calculate this.
mutations$dp = mutations$variant_read_count_tumor + mutations$reference_read_count_tumor
ggplot(mutations, aes(x=dp)) +
geom_density( color="darkblue", fill="steelblue" ) + geom_vline(xintercept = 20, linetype="dotted",
color = "grey", size=1.5) + ggtitle ( " density plot, total depth")
# ? by looking at this plot we can see that there is a good amount of mutations that are under 20
# ? how would you remove this?
# before
dim ( mutations )
# after
mutations = mutations[ mutations$dp > 20, ]
dim (mutations )
# lets calculate allele freqeuncy here as well
mutations$af = mutations$variant_read_count_tumor / mutations$dp
ggplot(mutations, aes(x=af)) +
geom_density( color="darkblue", fill="#e8975a" ) + geom_vline(xintercept = .1, linetype="dotted",
color = "grey", size=1.5) + ggtitle ( " density plot, allele freqeuncy")
# ? what do you think it means when af is higher for a particular mutation
# Bonus pick the top 10 mutations ranked by af
mutations = mutations[ order ( - mutations$af ) , ]
k2 ( head ( mutations, 10) , "top 10 variant ranked by AF")
# lets further filter the mutations with any af > .1
mutations = mutations[ mutations$af > .1, ]
dim (mutations)
# plot 20 highest recurrent gene mutations
mutation.gene = data.frame ( table ( mutations$gene_symbol))
mutation.gene = mutation.gene[ order ( - mutation.gene$Freq), ]
mutation.gene$Var1 = factor ( mutation.gene$Var1, levels = rev ( mutation.gene$Var1) )
ggplot(mutation.gene [ 1:20, ] , aes(Var1,Freq), label=Freq ) +
geom_bar(aes(fill = Freq), stat="identity", position = "dodge") +
coord_flip() +
scale_fill_distiller(palette = "RdBu") + xlab("") + ylab("") +
theme(strip.text.y = element_text(angle = 0), legend.position="none") +
geom_text(aes(label=Freq), position=position_dodge(width=0.9), vjust=.4, hjust = .5, size=5) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
text = element_text(size=16),  # size of label
axis.text.x = element_text(angle=0, hjust=1) ) + ggtitle ( "Most recurrent genes")
# as mentioned previously one reliable way to look for relevant mutations is to match it against what has been previosly observed and/or study.
cosmic.mutation = mutations [ !is.na(mutations$description), ]
mutation.type = data.frame ( table ( cosmic.mutation$mutation_type))
mutation.type = mutation.type[ order ( mutation.type$Freq), ]
mutation.type$Var1 = factor ( mutation.type$Var1, levels = mutation.type$Var1)
ggplot(mutation.type, aes(Var1,Freq), label=Freq ) +
geom_bar(aes(fill = Freq), stat="identity", position = "dodge") +
coord_flip() +
scale_fill_distiller(palette = "RdBu") + xlab("") + ylab("") +
theme(strip.text.y = element_text(angle = 0), legend.position="none") +
geom_text(aes(label=Freq), position=position_dodge(width=0.9), vjust=.4, hjust = .5, size=5) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
text = element_text(size=16),  # size of label
axis.text.x = element_text(angle=0, hjust=1) ) + ggtitle ( "BRCA mutation types found in cosmic")
# ? compare the two plots, did anything change?
# based on literature these are some of the genes involved in breast cancer.
imp
# lets study them and see what types of mutations corresponds most with these genes.
mutation.brca = data.frame ( table ( mutations[ mutations$gene_symbol %in% imp, ] $mutation_type))
mutation.brca = mutation.brca[ order ( mutation.brca$Freq), ]
mutation.brca$Var1 = factor ( mutation.brca$Var1, levels = mutation.brca$Var1)
ggplot(mutation.brca, aes(Var1,Freq), label=Freq ) +
geom_bar(aes(fill = Freq), stat="identity", position = "dodge") +
coord_flip() +
scale_fill_distiller(palette = "RdBu") + xlab("") + ylab("") +
theme(strip.text.y = element_text(angle = 0), legend.position="none") +
geom_text(aes(label=Freq), position=position_dodge(width=0.9), vjust=.4, hjust = .5, size=5) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
text = element_text(size=16),  # size of label
axis.text.x = element_text(angle=0, hjust=1) ) + ggtitle ( "Mutation-types in genes associated with breast cancer")
# lets assume that we don't know these genes
# ? can you think of a way to find them based on what we have?
# there are many like how we sorted by most frequent above.
# another is to subset by what has already been observe in cosmic
imp.brac = data.frame ( table ( mutations[ grepl( "breast", mutations$description), ]$gene_symbol ) )
imp.brac$fraction = imp.brac$Freq / nrow ( mutations)
imp.brac = imp.brac [ order ( -imp.brac$fraction) , ]
k2 ( head ( imp.brac, 10), "top cosmic genes found in breast cancer")
# ? how does this compare to our plot above
# both analysis seem to show a lot of overlap eg that TP53 and PIK3CA are important.  Lets breakdown the mutation type a bit more for the top 5
top5 = as.character ( imp.brac$Var1[1:5] )
top5 = mutations[ mutations$gene_symbol %in% top5, ]$amino_acid_change
top5 = data.frame ( table ( top5 ) )
top5 = top5 [ order ( - top5$Freq), ]
# quick hack to add url, will not work with *
top5$url = paste0(url,top5$top5)
k2 ( head ( top5, 20), "top 20 recurrent mutations")
# part of studying mutations is look for clinical significance.  One way to do this is to match your mutations to actionable
# targets
mutations$drug = paste ( mutations$gene_symbol, mutations$amino_acid_change)
action = drug[ drug$match %in% unique ( mutations$drug  ), ]
action.f = c("gene" ,"variant" , "disease", "drugs", "evidence_type",
"clinical_significance", "evidence_statement", "evidence_civic_url", "gene_civic_url" , "match"
)
k2 ( head ( action[ ,action.f], 20) ,"example of actionable mutations in the BRCA set" )
# Bonus can you figure out which samples have druggable targets?
#? look at evidence type. Can yo figure out which of these are diagnostic vs targetable?
k2 ( head ( action[action$clinical_significance == "Sensitivity/Response" ,action.f], 20) )
head ( mutations )
unique ( mutations$drug)
table ( mutations$drug)
head ( action )
test = mutations [ mutations$drug %in% drug$match,  ]
head ( test )
most.freq =  data.frame (  table ( mutations$case_id)  )
most.freq
most.freq = most.freq [ order ( - most.freq$Freq), ]
head ( most.freq )
samples
myid = "TCGA-AC-A23H-01"
actionid = drug[ drug$match %in% unique ( mutations[mutations$case_id == myid, ]  $drug  ), ]
actionid
mutations[mutations$case_id == myid, ]  $drug
unique ( mutations[mutations$case_id == myid, ]  $drug  )
test = mutations [ mutations$drug %in% action$match,  ]
head ( test )
most.freq =  data.frame (  table ( mutations$case_id)  )
most.freq = most.freq [ order ( - most.freq$Freq), ]
head ( most.freq )
test = mutations [ mutations$drug %in% drug$match,  ]
head ( test )
most.freq =  data.frame (  table ( test$case_id)  )
most.freq = most.freq [ order ( - most.freq$Freq), ]
head ( most.freq )
samples
myid = "TCGA-C8-A131-01"
actionid = drug[ drug$match %in% unique ( mutations[mutations$case_id == myid, ]  $drug  ), ]
actionid
View ( head ( actionid))
unique ( mutations[mutations$case_id == myid, ]  $drug  )
nrow ( actionid )
k2 ( actionid )
actionid %>% dplyr::group_by(variant) %>%
dplyr::summarise(
disease = paste(unique ( disease ), collapse = "," ),
drugs = paste(unique ( drugs ), collapse = "," ) ,
gene = paste(unique ( gene ), collapse = "," ) ,
clinical_significance =  paste(unique ( clinical_significance ), collapse = "," )
) %>%
data.frame()
actionid %>% dplyr::group_by(variant) %>%
dplyr::summarise(
gene = paste(unique ( gene ), collapse = "," ) ,
disease = paste(unique ( disease ), collapse = "," ),
drugs = paste(unique ( drugs ), collapse = "," ) ,
clinical_significance =  paste(unique ( clinical_significance ), collapse = "," )
) %>%
data.frame()
myid = "TCGA-C8-A131-01"
actionid = drug[ drug$match %in% unique ( mutations[mutations$case_id == myid, ]  $drug  ), ]
actionid = actionid %>% dplyr::group_by(variant) %>%
dplyr::summarise(
gene = paste(unique ( gene ), collapse = "," ) ,
disease = paste(unique ( disease ), collapse = "," ),
clinical_significance =  paste(unique ( clinical_significance ), collapse = "," ),
drugs = paste(unique ( drugs ), collapse = "," )
) %>%
data.frame()
k2( actionid, myid)
sessionInfo()
package(kable)
?kable
